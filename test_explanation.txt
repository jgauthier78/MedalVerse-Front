---------
-Outils:-
---------


catchException(Promise, errType) 
Utilisé pour tester qu'une exception a bien été levée. Permet de tester la bonne implémentation de modifiers / assert /require


--------------------
Structures Internes:
--------------------


Coverage:
---------

MedalVerse expose la majorité des fonctionnalités disponibles, seules quelques fonctions provenant des classes (AuthorHandler, EventHandler, MedalHandler, OrganizerHandler, SportsmanHandler, UserHandler) sont publiques et utilisables par un autre utilisateur que Owner
Les tests suivent le schéma de la User Story et ne couvrent pas les fonctionnalités hors de ce contexte  (NFT_Medal_Bkg, suppression de sportifs / événements / organisateurs / Admin, et AuthorHandler n'est pas utilisé)




Tests de medalVerse

contrat UserHandler:

Cas de bon Fonctionnement
  A-Enregistrer un utilisateur dans la base et vérifier le stockage des paramètres
  C-Créer un User de type sportif, et vérifier qu'un SportsMan a été créé
  D-Creer un User de type organisateur, vérifier qu'un Organizer est créé
  E-Creer un User de type auteur, vérifier qu'un Author est créé

Gestion d'erreurs
  B-Vérifier qu'un utilisateur autre que owner ne peut pas enregistrer de User
  F-Vérifier qu'une exception est générée lorsque l'on lit en dehors de la plage des sportifs créés
  G-Vérifier qu'une exception est générée lorsque l'on lit en dehors de la plage des organizers créés
  H-Vérifier qu'un user non auteur retourne un auteur vide
contrat AuthorHandler:

Cas de bon Fonctionnement
  I-Ajouter une création à un auteur, vérifier la bonne écriture dans la base
  J-Vérifier qu'un création a bien un lien avec son auteur
  K-Affecte un descriptif de NFT à une création et vérifie le lien
 
