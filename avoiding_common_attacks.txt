


MedalVerse.sol

Ré-entrance:
-----------
MedalVerse n'effectue pas de transfert, encapsule les NFT dans une structure, mais n'appelle pas de fonction sur ces derniers.
Pas de soucis de ré-entrance


OverFlow: 
---------
Variables sensibles: 
- Dates d'événement soumises à medalVerse, ajout de check pour vérifier qu'elles sont logiques (endtime> startTime && endTime>0), mais pas de manipulation de ces dernieres en solidity donc 
- Toutes les données de référence (identifiant dans la base) sont checkées pour être dans les bonnes ranges de tableaux/map, on vérifie qu'elles ne générerent pas d'erreur ou d'échec innatendu.


Unexpected Ether: 
----------------
MedalVerse n'est pas payable, mais prend des NFT en paramètres qui eux peuvent déjà être mintés: check à prévoir

Visibilité:
-----------
MedalVerse est très sensible à la visibilté, en effet:

- Chaque contrat (Organizer,event,medal..) gère son métier de façon unilatérale, MedalVerse gère la synchronisation des différentes contrats en en assurant la bonne intégrité. Si une fonction des contrats Handler pouvait être appelée indépendemment des autres Handler, la base pourrait être rendue inutilisable.

Aussi on définit les règles suivantes:
**************************************
Pour les contrats handlers :
- Toutes les fonctions view peuvent-être publiques
- Toutes les fonctions nécessitant une intéraction ou ayant une dépendance avec un autre Handler sont en internal et une fonction de Medalverse gère la synchronisation.
- Tous les setters qui ont un role de fonction interne à la DAPP sont en owner

Pour le contrat MedalVerse:
- Les fonctions ne correspondant pas à des fonctionnalités utilisateurs (mais nécessaires aux fonctionnement de la DAPP) sont en onlyOwner


Référence à un contrat externe:
-------------------------------

- les deux contrats NFT et ThrowIn sont encapsulés dans les structures, mais aucun appel n'est effectué sur ces derniers, ils sont transmis au JS.
- Throwin est minté indépendamment de MedalVerse, et le contrat affecte le NFT via:

MedalVerse.sol : adminAddMedal(uint256 eventID, address _nft)

-> on vérifie la bonne implémentation de l'interface
IERC721(_nft).supportsInterface(type(IERC721).interfaceId);


Envoyer une adresse incomplete: 
-------------------------------

msg.sender est utilisé pour les enregistrements d'utilisateur et les addresses sont checkées


Success de call:
----------------

Pas de Call dans les classes


Timestamp:
----------

Les dates utilisées sont en universal time, et gérée par le front. Pas d'interaction avec le contrat.

tx.origin:
----------
Pas d'exploitation de "tx"
